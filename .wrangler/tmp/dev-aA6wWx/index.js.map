{
  "version": 3,
  "sources": ["../bundle-bIQC9Y/checked-fetch.js", "../bundle-bIQC9Y/strip-cf-connecting-ip-header.js", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/createCors.ts", "../../../packages/worker/dist/handlers/predictions.js", "../../../packages/worker/dist/handlers/results.js", "../../../packages/worker/dist/handlers/drivers.js", "../../../packages/worker/dist/handlers/races.js", "../../../packages/worker/dist/handlers/analytics.js", "../../../packages/worker/dist/handlers/predictions-admin.js", "../../../packages/worker/dist/index.js", "../../../packages/worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../packages/worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-bIQC9Y/middleware-insertion-facade.js", "../../../packages/worker/node_modules/wrangler/templates/middleware/common.ts", "../bundle-bIQC9Y/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/.wrangler/tmp/dev-aA6wWx",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "export async function handlePredictions(request, env) {\n    const url = new URL(request.url);\n    const raceId = url.pathname.split('/').pop();\n    try {\n        const { results } = await env.DB.prepare(`SELECT \n        p.*,\n        d.name as driver_name,\n        d.code as driver_code,\n        d.team as driver_team,\n        r.name as race_name,\n        r.date as race_date\n       FROM predictions p\n       JOIN drivers d ON p.driver_id = d.id\n       JOIN races r ON p.race_id = r.id\n       WHERE p.race_id = ?\n       ORDER BY p.predicted_position`).bind(raceId).all();\n        return new Response(JSON.stringify({ predictions: results }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        return new Response(JSON.stringify({ error: 'Failed to fetch predictions' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\nexport async function handleLatestPredictions(request, env) {\n    try {\n        // Get the latest race\n        const { results: races } = await env.DB.prepare(`SELECT id FROM races \n       WHERE date >= date('now') \n       ORDER BY date ASC \n       LIMIT 1`).all();\n        if (races.length === 0) {\n            // If no future races, get the most recent past race\n            const { results: pastRaces } = await env.DB.prepare(`SELECT id FROM races \n         ORDER BY date DESC \n         LIMIT 1`).all();\n            if (pastRaces.length === 0) {\n                return new Response(JSON.stringify({ predictions: [] }), {\n                    headers: { 'Content-Type': 'application/json' },\n                });\n            }\n            races[0] = pastRaces[0];\n        }\n        const raceId = races[0].id;\n        // Get predictions for this race\n        const { results: predictions } = await env.DB.prepare(`SELECT \n        p.*,\n        d.name as driver_name,\n        d.code as driver_code,\n        d.team as driver_team,\n        r.name as race_name,\n        r.date as race_date,\n        r.circuit as race_circuit\n       FROM predictions p\n       JOIN drivers d ON p.driver_id = d.id\n       JOIN races r ON p.race_id = r.id\n       WHERE p.race_id = ?\n       ORDER BY p.predicted_position`).bind(raceId).all();\n        return new Response(JSON.stringify({ predictions }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        return new Response(JSON.stringify({ error: 'Failed to fetch latest predictions' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\n", "export async function handleResults(request, env) {\n    const url = new URL(request.url);\n    const raceId = url.pathname.split('/').pop();\n    try {\n        const { results } = await env.DB.prepare(`SELECT \n        rr.*,\n        d.name as driver_name,\n        d.code as driver_code,\n        d.team as driver_team,\n        r.name as race_name,\n        r.date as race_date\n       FROM race_results rr\n       JOIN drivers d ON rr.driver_id = d.id\n       JOIN races r ON rr.race_id = r.id\n       WHERE rr.race_id = ?\n       ORDER BY rr.position`).bind(raceId).all();\n        return new Response(JSON.stringify({ results }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        return new Response(JSON.stringify({ error: 'Failed to fetch results' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\n", "export async function handleDrivers(request, env) {\n    try {\n        const { results } = await env.DB.prepare(`SELECT \n        d.*,\n        COUNT(DISTINCT p.race_id) as total_predictions,\n        AVG(p.predicted_position) as avg_predicted_position,\n        COUNT(DISTINCT rr.race_id) as total_races,\n        AVG(rr.position) as avg_actual_position,\n        SUM(rr.points) as total_points\n       FROM drivers d\n       LEFT JOIN predictions p ON d.id = p.driver_id\n       LEFT JOIN race_results rr ON d.id = rr.driver_id\n       GROUP BY d.id\n       ORDER BY total_points DESC`).all();\n        return new Response(JSON.stringify({ drivers: results }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        return new Response(JSON.stringify({ error: 'Failed to fetch drivers' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\n", "export async function handleRaces(request, env) {\n    try {\n        const url = new URL(request.url);\n        const season = url.searchParams.get('season') || new Date().getFullYear().toString();\n        const { results } = await env.DB.prepare(`SELECT \n        r.*,\n        COUNT(DISTINCT p.id) as prediction_count,\n        COUNT(DISTINCT rr.id) as result_count,\n        CASE \n          WHEN r.date < date('now') THEN 'completed'\n          WHEN r.date = date('now') THEN 'today'\n          ELSE 'upcoming'\n        END as status\n       FROM races r\n       LEFT JOIN predictions p ON r.id = p.race_id\n       LEFT JOIN race_results rr ON r.id = rr.race_id\n       WHERE r.season = ?\n       GROUP BY r.id\n       ORDER BY r.round`).bind(season).all();\n        return new Response(JSON.stringify({ races: results }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        return new Response(JSON.stringify({ error: 'Failed to fetch races' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\n", "export async function handleAccuracy(request, env) {\n    try {\n        // Get model accuracy over time\n        const { results: metrics } = await env.DB.prepare(`SELECT \n        mm.*,\n        r.name as race_name,\n        r.date as race_date\n       FROM model_metrics mm\n       LEFT JOIN races r ON mm.race_id = r.id\n       ORDER BY mm.created_at DESC\n       LIMIT 20`).all();\n        // Get prediction accuracy by comparing predictions to actual results\n        const { results: accuracy } = await env.DB.prepare(`SELECT \n        r.name as race_name,\n        r.date as race_date,\n        AVG(ABS(p.predicted_position - rr.position)) as avg_position_error,\n        AVG(ABS(p.predicted_time - rr.time)) as avg_time_error,\n        COUNT(*) as prediction_count\n       FROM predictions p\n       JOIN race_results rr ON p.race_id = rr.race_id AND p.driver_id = rr.driver_id\n       JOIN races r ON p.race_id = r.id\n       GROUP BY p.race_id\n       ORDER BY r.date DESC\n       LIMIT 10`).all();\n        return new Response(JSON.stringify({\n            model_metrics: metrics,\n            prediction_accuracy: accuracy\n        }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        return new Response(JSON.stringify({ error: 'Failed to fetch analytics' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\n", "export async function handleCreatePredictions(request, env) {\n    try {\n        // Check for API key authentication\n        const apiKey = request.headers.get('X-API-Key');\n        if (apiKey !== env.PREDICTIONS_API_KEY) {\n            return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n                status: 401,\n                headers: { 'Content-Type': 'application/json' },\n            });\n        }\n        // Parse request body\n        const data = await request.json();\n        // Validate required fields\n        if (!data.race_id || !data.predictions || !data.model_version) {\n            return new Response(JSON.stringify({ error: 'Missing required fields' }), {\n                status: 400,\n                headers: { 'Content-Type': 'application/json' },\n            });\n        }\n        // Start a transaction\n        const timestamp = new Date().toISOString();\n        // Delete existing predictions for this race\n        await env.DB.prepare('DELETE FROM predictions WHERE race_id = ?').bind(data.race_id).run();\n        // Insert new predictions\n        const insertPromises = data.predictions.map(pred => env.DB.prepare(`INSERT INTO predictions \n         (race_id, driver_id, predicted_position, predicted_time, confidence, model_version, created_at)\n         VALUES (?, ?, ?, ?, ?, ?, ?)`).bind(data.race_id, pred.driver_id, pred.predicted_position, pred.predicted_time, pred.confidence, data.model_version, timestamp).run());\n        await Promise.all(insertPromises);\n        // Store model metrics if provided\n        if (data.model_metrics) {\n            await env.DB.prepare(`INSERT INTO model_metrics (model_version, race_id, mae, accuracy, created_at)\n         VALUES (?, ?, ?, ?, ?)`).bind(data.model_version, data.race_id, data.model_metrics.mae, data.model_metrics.accuracy, timestamp).run();\n        }\n        return new Response(JSON.stringify({\n            success: true,\n            predictions_stored: data.predictions.length,\n            model_version: data.model_version\n        }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        console.error('Error creating predictions:', error);\n        return new Response(JSON.stringify({ error: 'Failed to store predictions' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\nexport async function handleTriggerPredictions(request, env) {\n    try {\n        // Check for API key or cron trigger\n        const apiKey = request.headers.get('X-API-Key');\n        const isCronTrigger = request.headers.get('X-CF-Cron-Trigger') === 'true';\n        if (apiKey !== env.PREDICTIONS_API_KEY && !isCronTrigger) {\n            return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n                status: 401,\n                headers: { 'Content-Type': 'application/json' },\n            });\n        }\n        // Get upcoming races\n        const { results: upcomingRaces } = await env.DB.prepare(`SELECT r.*, COUNT(p.id) as prediction_count\n       FROM races r\n       LEFT JOIN predictions p ON r.id = p.race_id\n       WHERE r.date >= date('now')\n         AND r.date <= date('now', '+14 days')\n         AND r.season = 2025\n       GROUP BY r.id\n       ORDER BY r.date\n       LIMIT 5`).all();\n        const racesToProcess = upcomingRaces.filter(race => race.prediction_count === 0);\n        if (racesToProcess.length === 0) {\n            return new Response(JSON.stringify({\n                message: 'No races need predictions',\n                checked: upcomingRaces.length\n            }), {\n                headers: { 'Content-Type': 'application/json' },\n            });\n        }\n        // Trigger prediction generation via external service\n        // In production, this would call your Python service or GitHub Action\n        const results = [];\n        for (const race of racesToProcess) {\n            // Log the race that needs predictions\n            results.push({\n                race_id: race.id,\n                race_name: race.name,\n                date: race.date,\n                status: 'pending'\n            });\n        }\n        // Store trigger event\n        await env.DB.prepare(`INSERT INTO prediction_triggers (races_count, trigger_type, created_at)\n       VALUES (?, ?, ?)`).bind(racesToProcess.length, isCronTrigger ? 'cron' : 'manual', new Date().toISOString()).run();\n        return new Response(JSON.stringify({\n            success: true,\n            races_to_process: results,\n            message: `Triggered predictions for ${racesToProcess.length} races`\n        }), {\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n    catch (error) {\n        console.error('Error triggering predictions:', error);\n        return new Response(JSON.stringify({ error: 'Failed to trigger predictions' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n        });\n    }\n}\n", "import { Router } from 'itty-router';\nimport { handlePredictions, handleLatestPredictions } from './handlers/predictions';\nimport { handleResults } from './handlers/results';\nimport { handleDrivers } from './handlers/drivers';\nimport { handleRaces } from './handlers/races';\nimport { handleAccuracy } from './handlers/analytics';\nimport { handleCreatePredictions, handleTriggerPredictions } from './handlers/predictions-admin';\nconst router = Router();\n// CORS headers\nconst corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n};\n// Handle CORS preflight\nrouter.options('*', () => {\n    return new Response(null, { headers: corsHeaders });\n});\n// API Routes\nrouter.get('/api/predictions/latest', handleLatestPredictions);\nrouter.get('/api/predictions/:raceId', handlePredictions);\nrouter.get('/api/results/:raceId', handleResults);\nrouter.get('/api/drivers', handleDrivers);\nrouter.get('/api/races', handleRaces);\nrouter.get('/api/analytics/accuracy', handleAccuracy);\n// Admin routes (require API key)\nrouter.post('/api/admin/predictions', handleCreatePredictions);\nrouter.post('/api/admin/trigger-predictions', handleTriggerPredictions);\n// Health check\nrouter.get('/api/health', () => {\n    return new Response(JSON.stringify({ status: 'ok' }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n});\n// 404 handler\nrouter.all('*', () => {\n    return new Response('Not Found', { status: 404 });\n});\nexport default {\n    async fetch(request, env) {\n        return router.handle(request, env).then((response) => {\n            // Add CORS headers to all responses\n            Object.entries(corsHeaders).forEach(([key, value]) => {\n                response.headers.set(key, value);\n            });\n            return response;\n        });\n    },\n    async scheduled(event, env, ctx) {\n        // Handle cron trigger\n        const request = new Request('https://worker/api/admin/trigger-predictions', {\n            method: 'POST',\n            headers: {\n                'X-CF-Cron-Trigger': 'true',\n                'Content-Type': 'application/json'\n            }\n        });\n        const response = await handleTriggerPredictions(request, env);\n        const result = await response.json();\n        console.log('Cron trigger result:', result);\n    }\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/packages/worker/dist/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/packages/worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/packages/worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/packages/worker/dist/index.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/.wrangler/tmp/bundle-bIQC9Y/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/packages/worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/.wrangler/tmp/bundle-bIQC9Y/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/hannesandresen/Library/CloudStorage/OneDrive-Personal/AzureDevOps/2025_f1_predictions/.wrangler/tmp/bundle-bIQC9Y/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "e", "e"]
}
